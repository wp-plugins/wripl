<?php

require_once 'Wripl/Link/Item.php';
require_once 'Wripl/Link/Collection.php';
require_once 'Wripl/Exception.php';

/**
 * Test class for Wripl_Link_Item.
 * Generated by PHPUnit on 2011-09-23 at 10:50:59.
 */
class Wripl_Link_ItemTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Wripl_Link_Item
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testAddLink()
    {
        $list = $this->_getTestList();
        $expectedJson = $this->_getTestListJson();

        $this->assertSame($expectedJson, $list->toJson());
    }

    public function testBuildListFromJson()
    {
        $list = new Wripl_Link_Collection(json_decode($this->_getTestListJson()));
        $this->assertSame($this->_getTestListJson(), $list->toJson());
    }

    public function testFindItem()
    {
        $list = $this->_getTestList();

        $uri = 'http://www.example.com/parent1.html';
        $foundItem = $list->findItem($uri);

        $this->assertInstanceOf('Wripl_Link_Item', $foundItem, 'Item with uri ' . $uri . ' not found!');
        $this->assertEquals($uri, $foundItem->getUri());
    }

    public function testItemRemoval()
    {
        $list = $this->_getTestList();

        $uri = 'http://www.example.com/parent1.html';

        $list->removeItem($uri);

        $expectedJson = '[{"uri":"http:\/\/www.example.com\/parent2.html","relevance":5}]';

        $this->assertEquals($expectedJson, $list->toJson());
    }

    public function testCount()
    {
        $list = $this->_getTestList();
        $this->assertEquals(2, count($list));
    }


    /**
     * Helper methods
     */

    private function _getTestList()
    {
        $list = new Wripl_Link_Collection();

        $item1 = new Wripl_Link_Item();
        $item1->setUri('http://www.example.com/parent1.html')
              ->setRelevance(5);

        $item1_child1 = new Wripl_Link_Item();
        $item1_child1->setUri('http://www.example.com/parent1-child1.html')
                     ->setRelevance(1);

        $item1_child2 = new Wripl_Link_Item();
        $item1_child2->setUri('http://www.example.com/parent1-child2.html')
                     ->setRelevance(2);

        $item1->addLink($item1_child1)
              ->addLink($item1_child2);

        $item2 = new Wripl_Link_Item();
        $item2->setUri('http://www.example.com/parent2.html')
              ->setRelevance(5);

        $list->addLink($item1);
        $list->addLink($item2);

        return $list;
    }

    public function testJsonifyEmptyList()
    {
        $list = new Wripl_Link_Collection();
        $this->assertSame('[]', $list->toJson());
    }

    private function _getTestListJson()
    {
        return '[{"uri":"http:\/\/www.example.com\/parent1.html","relevance":5,"link_collection":[{"uri":"http:\/\/www.example.com\/parent1-child1.html","relevance":1},{"uri":"http:\/\/www.example.com\/parent1-child2.html","relevance":2}]},{"uri":"http:\/\/www.example.com\/parent2.html","relevance":5}]';
    }

}